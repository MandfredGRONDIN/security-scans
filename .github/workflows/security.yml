name: Security Scans (SAST + DAST)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  security:
    name: Security Scans
    runs-on: ubuntu-latest
    services:
      juice-shop:
        image: bkimminich/juice-shop:latest
        ports:
          - 3000:3000

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Installer jq pour parser JSON
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # Installation de Trivy
      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh \
            | sudo sh -s -- -b /usr/local/bin v0.66.0

      # Analyse de l‚Äôimage Docker Juice Shop
      - name: Scan Juice Shop image
        run: |
          docker pull bkimminich/juice-shop:latest
          trivy image --severity HIGH,CRITICAL --format table --output trivy_image_report.txt bkimminich/juice-shop:latest

      - name: Upload Trivy image report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-image-report
          path: trivy_image_report.txt

      # Analyse du code source 
      - name: Scan code repository
        run: |
          trivy fs --severity HIGH,CRITICAL --format table --output trivy_fs_report.txt .

      - name: Upload Trivy FS report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-fs-report
          path: trivy_fs_report.txt

      # Lancer OWASP ZAP en mode daemon
      - name: Start ZAP container
        run: |
          docker run -d --name zap -p 8090:8090 zaproxy/zap-stable zap.sh \
            -daemon -host 0.0.0.0 -port 8090 -config api.disablekey=true

      # Utiliser l'API REST de ZAP pour lancer Spider + Active Scan et g√©n√©rer le rapport HTML
      - name: Run ZAP scan via API
        run: |
          echo "‚è≥ Attente que ZAP soit pr√™t..."
          for i in {1..30}; do
            if curl -s http://localhost:8090/ -o /dev/null; then
              echo "‚úÖ ZAP est pr√™t !"
              break
            fi
            echo "ZAP pas encore pr√™t, nouvelle tentative..."
            sleep 5
          done

          echo "üöÄ Lancement du Spider"
          spider_id=$(curl -s "http://localhost:8090/JSON/spider/action/scan/?url=http://host.docker.internal:3000&recurse=true" | jq -r .scan)

          # Attendre la fin du Spider
          status=0
          while [ "$status" != "100" ]; do
            sleep 5
            status=$(curl -s "http://localhost:8090/JSON/spider/view/status/?scanId=$spider_id" | jq -r .status)
            echo "Spider en cours... $status%"
          done
          echo "‚úÖ Spider termin√©."

          echo "üöÄ Lancement de l'Active Scan"
          scan_id=$(curl -s "http://localhost:8090/JSON/ascan/action/scan/?url=http://host.docker.internal:3000" | jq -r .scan)

          # Attendre la fin de l'Active Scan
          status=0
          while [ "$status" != "100" ]; do
            sleep 10
            status=$(curl -s "http://localhost:8090/JSON/ascan/view/status/?scanId=$scan_id" | jq -r .status)
            echo "Active Scan en cours... $status%"
          done
          echo "‚úÖ Active Scan termin√©."

          echo "üìÑ G√©n√©ration du rapport HTML"
          curl -s "http://localhost:8090/OTHER/core/other/htmlreport/" -o zap_report.html

      - name: Upload ZAP report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap_report.html
